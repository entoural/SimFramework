--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Server generated by Zap v0.6.8 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		PlayerStateUpdate = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		UpdatePlayerPasses = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		PlayerLeft = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		RequestData = table.freeze({
			SetCallback = noop
		}),
		RequestReplication = table.freeze({
			SetCallback = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end
local reliable = ReplicatedStorage:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = ReplicatedStorage
end

local unreliable = ReplicatedStorage:FindFirstChild("ZAP_UNRELIABLE")
if unreliable == nil then
	unreliable = Instance.new("UnreliableRemoteEvent")
	unreliable.Name = "ZAP_UNRELIABLE"
	unreliable.Parent = ReplicatedStorage
end
local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function SendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(5)
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 4 then
			local value
			if events[4] then
				task.spawn(events[4], player, value)
			end
		elseif id == 5 then
			local value
			if events[5] then
				task.spawn(events[5], player, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
local returns = table.freeze({
	SendEvents = SendEvents,
	PlayerStateUpdate = table.freeze({
		Fire = function(Player: Player, Value: ({
			Player: (string),
			Index: (string),
			Value: ({
				Type: "Cash",
				value: (number),
			}),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_1 = #Value.Player
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Player, len_1)
			local len_2 = #Value.Index
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Index, len_2)
			if Value.Value.Type == "Cash" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, Value.Value.value)
			else
				error("Invalid variant")
			end
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			Player: (string),
			Index: (string),
			Value: ({
				Type: "Cash",
				value: (number),
			}),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_1 = #Value.Player
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Player, len_1)
			local len_2 = #Value.Index
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Index, len_2)
			if Value.Value.Type == "Cash" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, Value.Value.value)
			else
				error("Invalid variant")
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			Player: (string),
			Index: (string),
			Value: ({
				Type: "Cash",
				value: (number),
			}),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_1 = #Value.Player
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Player, len_1)
			local len_2 = #Value.Index
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Index, len_2)
			if Value.Value.Type == "Cash" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, Value.Value.value)
			else
				error("Invalid variant")
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			Player: (string),
			Index: (string),
			Value: ({
				Type: "Cash",
				value: (number),
			}),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_1 = #Value.Player
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Player, len_1)
			local len_2 = #Value.Index
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Index, len_2)
			if Value.Value.Type == "Cash" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, Value.Value.value)
			else
				error("Invalid variant")
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			Player: (string),
			Index: (string),
			Value: ({
				Type: "Cash",
				value: (number),
			}),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_1 = #Value.Player
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Player, len_1)
			local len_2 = #Value.Index
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Index, len_2)
			if Value.Value.Type == "Cash" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, Value.Value.value)
			else
				error("Invalid variant")
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	UpdatePlayerPasses = table.freeze({
		Fire = function(Player: Player, Value: ({ ({
			Payload: ({ ({
				Player: (string),
				Data: ({
					Name: (string),
					Owned: (boolean),
					Gifted: (boolean),
				}),
			}) }),
		}) }))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_1 = #Value
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value[i_1]
				local len_2 = #val_1.Payload
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				for i_2 = 1, len_2 do
					local val_2 = val_1.Payload[i_2]
					local len_3 = #val_2.Player
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
					alloc(len_3)
					buffer.writestring(outgoing_buff, outgoing_apos, val_2.Player, len_3)
					local len_4 = #val_2.Data.Name
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
					alloc(len_4)
					buffer.writestring(outgoing_buff, outgoing_apos, val_2.Data.Name, len_4)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, val_2.Data.Owned and 1 or 0)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, val_2.Data.Gifted and 1 or 0)
				end
			end
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({ ({
			Payload: ({ ({
				Player: (string),
				Data: ({
					Name: (string),
					Owned: (boolean),
					Gifted: (boolean),
				}),
			}) }),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_1 = #Value
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value[i_1]
				local len_2 = #val_1.Payload
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				for i_2 = 1, len_2 do
					local val_2 = val_1.Payload[i_2]
					local len_3 = #val_2.Player
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
					alloc(len_3)
					buffer.writestring(outgoing_buff, outgoing_apos, val_2.Player, len_3)
					local len_4 = #val_2.Data.Name
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
					alloc(len_4)
					buffer.writestring(outgoing_buff, outgoing_apos, val_2.Data.Name, len_4)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, val_2.Data.Owned and 1 or 0)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, val_2.Data.Gifted and 1 or 0)
				end
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({ ({
			Payload: ({ ({
				Player: (string),
				Data: ({
					Name: (string),
					Owned: (boolean),
					Gifted: (boolean),
				}),
			}) }),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_1 = #Value
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value[i_1]
				local len_2 = #val_1.Payload
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				for i_2 = 1, len_2 do
					local val_2 = val_1.Payload[i_2]
					local len_3 = #val_2.Player
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
					alloc(len_3)
					buffer.writestring(outgoing_buff, outgoing_apos, val_2.Player, len_3)
					local len_4 = #val_2.Data.Name
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
					alloc(len_4)
					buffer.writestring(outgoing_buff, outgoing_apos, val_2.Data.Name, len_4)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, val_2.Data.Owned and 1 or 0)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, val_2.Data.Gifted and 1 or 0)
				end
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({ ({
			Payload: ({ ({
				Player: (string),
				Data: ({
					Name: (string),
					Owned: (boolean),
					Gifted: (boolean),
				}),
			}) }),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_1 = #Value
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value[i_1]
				local len_2 = #val_1.Payload
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				for i_2 = 1, len_2 do
					local val_2 = val_1.Payload[i_2]
					local len_3 = #val_2.Player
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
					alloc(len_3)
					buffer.writestring(outgoing_buff, outgoing_apos, val_2.Player, len_3)
					local len_4 = #val_2.Data.Name
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
					alloc(len_4)
					buffer.writestring(outgoing_buff, outgoing_apos, val_2.Data.Name, len_4)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, val_2.Data.Owned and 1 or 0)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, val_2.Data.Gifted and 1 or 0)
				end
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({ ({
			Payload: ({ ({
				Player: (string),
				Data: ({
					Name: (string),
					Owned: (boolean),
					Gifted: (boolean),
				}),
			}) }),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_1 = #Value
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value[i_1]
				local len_2 = #val_1.Payload
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				for i_2 = 1, len_2 do
					local val_2 = val_1.Payload[i_2]
					local len_3 = #val_2.Player
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
					alloc(len_3)
					buffer.writestring(outgoing_buff, outgoing_apos, val_2.Player, len_3)
					local len_4 = #val_2.Data.Name
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
					alloc(len_4)
					buffer.writestring(outgoing_buff, outgoing_apos, val_2.Data.Name, len_4)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, val_2.Data.Owned and 1 or 0)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, val_2.Data.Gifted and 1 or 0)
				end
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	PlayerLeft = table.freeze({
		Fire = function(Player: Player, Value: (string))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local len_1 = #Value
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value, len_1)
			player_map[Player] = save()
		end,
		FireAll = function(Value: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local len_1 = #Value
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local len_1 = #Value
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local len_1 = #Value
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local len_1 = #Value
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	RequestData = table.freeze({
		SetCallback = function(Callback: (Player) -> ()): () -> ()
			events[4] = Callback
			return function()
				events[4] = nil
			end
		end,
	}),
	RequestReplication = table.freeze({
		SetCallback = function(Callback: (Player) -> ()): () -> ()
			events[5] = Callback
			return function()
				events[5] = nil
			end
		end,
	}),
})
type Events = typeof(returns)
return returns
