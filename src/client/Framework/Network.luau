--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Client generated by Zap v0.6.8 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		PlayerStateUpdate = table.freeze({
			SetCallback = noop
		}),
		UpdatePlayerPasses = table.freeze({
			On = noop
		}),
		PlayerLeft = table.freeze({
			On = noop
		}),
		RequestData = table.freeze({
			Fire = noop
		}),
		RequestReplication = table.freeze({
			Fire = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local reliable = ReplicatedStorage:WaitForChild("ZAP_RELIABLE")
local unreliable = ReplicatedStorage:WaitForChild("ZAP_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE to be an UnreliableRemoteEvent")


local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(5)
local event_queue: { [number]: { any } } = table.create(5)
event_queue[1] = {}
events[2] = {}
event_queue[2] = {}
events[3] = {}
event_queue[3] = {}
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 1 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.Player = buffer.readstring(incoming_buff, read(len_1), len_1)
			local len_2 = buffer.readu16(incoming_buff, read(2))
			value.Index = buffer.readstring(incoming_buff, read(len_2), len_2)
			value.Value = {}
			local enum_value_1 = buffer.readu8(incoming_buff, read(1))
			if enum_value_1 == 0 then
				value.Value.Type = "Cash"
				value.Value.Value = buffer.readu32(incoming_buff, read(4))
			elseif enum_value_1 == 1 then
				value.Value.Type = "Deployed"
				value.Value.Value = buffer.readu8(incoming_buff, read(1)) == 1
			else
				error("Invalid variant")
			end
			if events[1] then
				task.spawn(events[1], value)
			else
				table.insert(event_queue[1], value)
				if #event_queue[1] > 64 then
					warn(`[ZAP] {#event_queue[1]} events in queue for PlayerStateUpdate. Did you forget to attach a listener?`)
				end
			end
		elseif id == 2 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			for i_1 = 1, len_1 do
				local val_1
				val_1 = {}
				val_1.Payload = {}
				local len_2 = buffer.readu16(incoming_buff, read(2))
				for i_2 = 1, len_2 do
					local val_2
					val_2 = {}
					local len_3 = buffer.readu16(incoming_buff, read(2))
					val_2.Player = buffer.readstring(incoming_buff, read(len_3), len_3)
					val_2.Data = {}
					local len_4 = buffer.readu16(incoming_buff, read(2))
					val_2.Data.Name = buffer.readstring(incoming_buff, read(len_4), len_4)
					val_2.Data.Owned = buffer.readu8(incoming_buff, read(1)) == 1
					val_2.Data.Gifted = buffer.readu8(incoming_buff, read(1)) == 1
					val_1.Payload[i_2] = val_2
				end
				value[i_1] = val_1
			end
			if events[2][1] then
				for _, cb in events[2] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[2], value)
				if #event_queue[2] > 64 then
					warn(`[ZAP] {#event_queue[2]} events in queue for UpdatePlayerPasses. Did you forget to attach a listener?`)
				end
			end
		elseif id == 3 then
			local value
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value = buffer.readstring(incoming_buff, read(len_1), len_1)
			if events[3][1] then
				for _, cb in events[3] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[3], value)
				if #event_queue[3] > 64 then
					warn(`[ZAP] {#event_queue[3]} events in queue for PlayerLeft. Did you forget to attach a listener?`)
				end
			end
		else
			error("Unknown event id")
		end
	end
end)
local returns = table.freeze({
	SendEvents = SendEvents,
	RequestData = table.freeze({
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
		end,
	}),
	RequestReplication = table.freeze({
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
		end,
	}),
	PlayerStateUpdate = table.freeze({
		SetCallback = function(Callback: (({
			Player: (string),
			Index: (string),
			Value: ({
				Type: "Cash",
				Value: (number),
			} | {
				Type: "Deployed",
				Value: (boolean),
			}),
		})) -> ()): () -> ()
			events[1] = Callback
			for _, value in event_queue[1] do
				task.spawn(Callback, value)
			end
			event_queue[1] = {}
			return function()
				events[1] = nil
			end
		end,
	}),
	UpdatePlayerPasses = table.freeze({
		On = function(Callback: (({ ({
			Payload: ({ ({
				Player: (string),
				Data: ({
					Name: (string),
					Owned: (boolean),
					Gifted: (boolean),
				}),
			}) }),
		}) })) -> ())
			table.insert(events[2], Callback)
			for _, value in event_queue[2] do
				task.spawn(Callback, value)
			end
			event_queue[2] = {}
			return function()
				table.remove(events[2], table.find(events[2], Callback))
			end
		end,
	}),
	PlayerLeft = table.freeze({
		On = function(Callback: ((string)) -> ())
			table.insert(events[3], Callback)
			for _, value in event_queue[3] do
				task.spawn(Callback, value)
			end
			event_queue[3] = {}
			return function()
				table.remove(events[3], table.find(events[3], Callback))
			end
		end,
	}),
})
type Events = typeof(returns)
return returns
